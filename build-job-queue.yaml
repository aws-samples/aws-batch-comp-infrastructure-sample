# Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.
# SPDX-License-Identifier: Apache-2.0

---
AWSTemplateFormatVersion: '2010-09-09'
Description: 'AWS CloudFormation Sample Template Managed Single Batch Job Queue: This
  template demonstrates the usage of simple Job Queue and EC2 style Compute Environment
  along with multi-node jobs (on a relatively small scale: 4 instances, 16 cores each).
  N.B.: This is all boilerplate until the EcsInstanceRole! '

Parameters:
  ProjectName:
    Type: String
    Default: "proofs"
    Description: "S3 bucket will be AccountId-Region-ProjectName"
  Region:
    Type: String
    Default: "us-west-2"
    Description: "Region to deploy in"

Resources:

  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
 
  InternetGateway:
    Type: AWS::EC2::InternetGateway

  EIP:
    Type: 'AWS::EC2::EIP'
    Properties:
      Domain: vpc


  VPCGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId:
        Ref: VPC
      InternetGatewayId:
        Ref: InternetGateway

 
  SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: EC2 Security Group for instances launched in the VPC by Batch
      VpcId:
        Ref: VPC
      SecurityGroupIngress:
        - CidrIp: 10.0.0.0/0
          Description: SSH port
          FromPort: 0
          IpProtocol: TCP
          ToPort: 65535

  NatGateway:
    Type: 'AWS::EC2::NatGateway'
    Properties:
      AllocationId: !GetAtt 'EIP.AllocationId'
      SubnetId: !Ref SubnetPublic

  NatAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC

  SubnetPrivate:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Sub "${Region}a"
      CidrBlock: 10.0.0.0/24
      VpcId: !Ref VPC
      MapPublicIpOnLaunch: 'True'
  RouteTablePrivate:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:
        Ref: VPC
  RoutePrivate:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId:
        Ref: RouteTablePrivate
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway

  SubnetRouteTableAssociationPrivate:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref RouteTablePrivate
      SubnetId: !Ref SubnetPrivate


  SubnetPublic:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Sub "${Region}a"
      CidrBlock: 10.0.1.0/24
      VpcId: !Ref VPC
      MapPublicIpOnLaunch: 'True'
  RouteTablePublic:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:
        Ref: VPC
  RoutePublic:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId:
        Ref: RouteTablePublic
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  SubnetRouteTableAssociationPublic:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref RouteTablePublic
      SubnetId: !Ref SubnetPublic

  BatchServiceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service: batch.amazonaws.com
          Action: sts:AssumeRole
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/service-role/AWSBatchServiceRole
 
  IamInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
      - Ref: EcsInstanceRole
 
  EcsInstanceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2008-10-17'
        Statement:
        - Sid: ''
          Effect: Allow
          Principal:
            Service: ec2.amazonaws.com
          Action: sts:AssumeRole
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/service-role/AmazonEC2ContainerServiceforEC2Role

  JobQueue:
    Type: AWS::Batch::JobQueue
    Properties:
      JobQueueName: !Sub "JobQueue-${ProjectName}"
      Priority: 1
      ComputeEnvironmentOrder:
      - Order: 1
        ComputeEnvironment:
          Ref: ComputeEnvironment

  ComputeEnvironment:
    Type: AWS::Batch::ComputeEnvironment
    Properties:
      Type: MANAGED
      ComputeEnvironmentName: !Sub "ComputeEnv-${ProjectName}"
      ComputeResources:
        Type: EC2
        MinvCpus: 0
        DesiredvCpus: 32
        MaxvCpus: 32
        AllocationStrategy: BEST_FIT_PROGRESSIVE
        InstanceTypes:
        - optimal
        Subnets:
        - Ref: SubnetPrivate
        SecurityGroupIds:
        - Ref: SecurityGroup
        InstanceRole:
          Ref: IamInstanceProfile
      ServiceRole:
        Ref: BatchServiceRole

# Non-boilerplate Batch code here!
  EcsTaskRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/AmazonEC2FullAccess
      - arn:aws:iam::aws:policy/AmazonS3FullAccess
      Policies:
        - PolicyName: !Sub "project-metrics-${AWS::Region}-${ProjectName}"
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Action:
                  - cloudwatch:PutMetricData
                Effect: Allow
                Resource: "*"
 
  JobDefinition:
    Type: AWS::Batch::JobDefinition
    Properties:
      JobDefinitionName: !Sub "JobDefinition-${ProjectName}"
      RetryStrategy:
        Attempts: 1
      Type: multinode
      NodeProperties:
        NumNodes: 2
        MainNode: 0
        NodeRangeProperties:
          -
            TargetNodes: "0:1"
            Container:
                Image: !Sub ${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${ProjectName}
                Vcpus: 4
                Memory: 64000
                JobRoleArn: !Ref EcsTaskRole
                Environment:
                  - Name: S3_BKT
                    Value: !Sub "${AWS::Region}-${AWS::AccountId}-${ProjectName}"

Outputs:
  ComputeEnvironmentArn:
    Value:
      Ref: ComputeEnvironment
    Export:
      Name: !Sub "ComputeEnvironmentArn-${ProjectName}"
  JobQueueArn:
    Value:
      Ref: JobQueue
    Export:
      Name: !Sub "JobQueueArn-${ProjectName}"
  JobDefinitionArn:
    Value:
      Ref: JobDefinition
    Export:
      Name: !Sub "JobDefinitionArn-${ProjectName}"
